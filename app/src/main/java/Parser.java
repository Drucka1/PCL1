import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

public class Parser {
    private String[][] rules;
    private String[] terminals;
    private String[] non_terminals;
    Map<String, Map<String, String[]>> ll1_table;
    
    
    public Parser() {
        this.ll1_table = getLL1table();
    }

    public Map<String, Map<String, String[]>> getLL1table() {
        Map<String, Map<String, String[]>> table = new HashMap<>();

        String[][] rules = {{}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {}, {}, {}, {}, {}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {"opt_newline", "def_etoile", "stmt_plus", "EOF"}, {}, {}, {"NEWLINE"}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {}, {"ε"}, {"ε"}, {}, {"ε"}, {}, {"ε"}, {}, {"ε"}, {}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {"deft", "def_etoile"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {}, {"ε"}, {"ε"}, {}, {"ε"}, {}, {"ε"}, {}, {"ε"}, {}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {"stmt", "stmt_plus_rest"}, {"stmt", "stmt_plus_rest"}, {}, {}, {}, {}, {}, {"stmt", "stmt_plus_rest"}, {"stmt", "stmt_plus_rest"}, {}, {"stmt", "stmt_plus_rest"}, {}, {"stmt", "stmt_plus_rest"}, {}, {"stmt", "stmt_plus_rest"}, {}, {"stmt", "stmt_plus_rest"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"stmt", "stmt_plus_rest"}, {"stmt", "stmt_plus_rest"}, {"stmt", "stmt_plus_rest"}, {"stmt", "stmt_plus_rest"}, {"stmt", "stmt_plus_rest"}, {}, {"ε"}, {}, {}, {"stmt_plus"}, {"stmt_plus"}, {}, {}, {}, {}, {"ε"}, {"stmt_plus"}, {"stmt_plus"}, {}, {"stmt_plus"}, {}, {"stmt_plus"}, {}, {"stmt_plus"}, {}, {"stmt_plus"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"stmt_plus"}, {"stmt_plus"}, {"stmt_plus"}, {"stmt_plus"}, {"stmt_plus"}, {}, {}, {}, {"def", "ident", "(", "ident_etoile_virgule", ")", ":", "suite"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"ident_plus_virgule"}, {}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"ident", "ident_plus_virgule_rest"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"ε"}, {}, {",", "ident_plus_virgule"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"NEWLINE", "BEGIN", "stmt_plus", "END"}, {}, {"simple_stmt", "NEWLINE"}, {"simple_stmt", "NEWLINE"}, {}, {}, {}, {}, {}, {"simple_stmt", "NEWLINE"}, {"simple_stmt", "NEWLINE"}, {}, {"simple_stmt", "NEWLINE"}, {}, {}, {}, {}, {}, {"simple_stmt", "NEWLINE"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"simple_stmt", "NEWLINE"}, {"simple_stmt", "NEWLINE"}, {"simple_stmt", "NEWLINE"}, {"simple_stmt", "NEWLINE"}, {"simple_stmt", "NEWLINE"}, {}, {}, {}, {}, {"or_expr", "simple_stmt_fact"}, {"or_expr", "simple_stmt_fact"}, {}, {}, {}, {}, {}, {"return", "expr"}, {"print", "(", "expr", ")"}, {}, {"or_expr", "simple_stmt_fact"}, {}, {}, {}, {}, {}, {"or_expr", "simple_stmt_fact"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"or_expr", "simple_stmt_fact"}, {"or_expr", "simple_stmt_fact"}, {"or_expr", "simple_stmt_fact"}, {"or_expr", "simple_stmt_fact"}, {"or_expr", "simple_stmt_fact"}, {}, {}, {"simple_stmt_fact_fact"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"simple_stmt_fact_fact"}, {"[", "expr", "]", "expr_crochet_etoile"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"=", "expr"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"simple_stmt", "NEWLINE"}, {"simple_stmt", "NEWLINE"}, {}, {}, {}, {}, {}, {"simple_stmt", "NEWLINE"}, {"simple_stmt", "NEWLINE"}, {}, {"simple_stmt", "NEWLINE"}, {}, {"for", "ident", "in", "expr", ":", "suite"}, {}, {"if", "expr", ":", "suite", "stmt_else"}, {}, {"simple_stmt", "NEWLINE"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"simple_stmt", "NEWLINE"}, {"simple_stmt", "NEWLINE"}, {"simple_stmt", "NEWLINE"}, {"simple_stmt", "NEWLINE"}, {"simple_stmt", "NEWLINE"}, {}, {"ε"}, {}, {}, {"ε"}, {"ε"}, {}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {}, {"ε"}, {}, {"ε"}, {}, {"ε"}, {"else", ":", "suite"}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {"or_expr", "expr_crochet_etoile"}, {"or_expr", "expr_crochet_etoile"}, {}, {}, {}, {}, {}, {}, {}, {}, {"or_expr", "expr_crochet_etoile"}, {}, {}, {}, {}, {}, {"or_expr", "expr_crochet_etoile"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"or_expr", "expr_crochet_etoile"}, {"or_expr", "expr_crochet_etoile"}, {"or_expr", "expr_crochet_etoile"}, {"or_expr", "expr_crochet_etoile"}, {"or_expr", "expr_crochet_etoile"}, {}, {}, {"ε"}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {}, {"[", "expr", "]", "expr_crochet_etoile"}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"and_expr", "or_expr_rest"}, {"and_expr", "or_expr_rest"}, {}, {}, {}, {}, {}, {}, {}, {}, {"and_expr", "or_expr_rest"}, {}, {}, {}, {}, {}, {"and_expr", "or_expr_rest"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"and_expr", "or_expr_rest"}, {"and_expr", "or_expr_rest"}, {"and_expr", "or_expr_rest"}, {"and_expr", "or_expr_rest"}, {"and_expr", "or_expr_rest"}, {}, {}, {"ε"}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"binop_or", "or_expr"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"not_expr", "and_expr_rest"}, {"not_expr", "and_expr_rest"}, {}, {}, {}, {}, {}, {}, {}, {}, {"not_expr", "and_expr_rest"}, {}, {}, {}, {}, {}, {"not_expr", "and_expr_rest"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"not_expr", "and_expr_rest"}, {"not_expr", "and_expr_rest"}, {"not_expr", "and_expr_rest"}, {"not_expr", "and_expr_rest"}, {"not_expr", "and_expr_rest"}, {}, {}, {"ε"}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"binop_and", "and_expr"}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"comp_expr"}, {"comp_expr"}, {}, {}, {}, {}, {}, {}, {}, {}, {"comp_expr"}, {}, {}, {}, {}, {}, {"not", "comp_expr"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"comp_expr"}, {"comp_expr"}, {"comp_expr"}, {"comp_expr"}, {"comp_expr"}, {}, {}, {}, {}, {"add_expr", "comp_expr_rest"}, {"add_expr", "comp_expr_rest"}, {}, {}, {}, {}, {}, {}, {}, {}, {"add_expr", "comp_expr_rest"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"add_expr", "comp_expr_rest"}, {"add_expr", "comp_expr_rest"}, {"add_expr", "comp_expr_rest"}, {"add_expr", "comp_expr_rest"}, {"add_expr", "comp_expr_rest"}, {}, {}, {"ε"}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"binop_comp", "add_expr"}, {"binop_comp", "add_expr"}, {"binop_comp", "add_expr"}, {"binop_comp", "add_expr"}, {"binop_comp", "add_expr"}, {"binop_comp", "add_expr"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"mut_expr", "add_expr_rest"}, {"mut_expr", "add_expr_rest"}, {}, {}, {}, {}, {}, {}, {}, {}, {"mut_expr", "add_expr_rest"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"mut_expr", "add_expr_rest"}, {"mut_expr", "add_expr_rest"}, {"mut_expr", "add_expr_rest"}, {"mut_expr", "add_expr_rest"}, {"mut_expr", "add_expr_rest"}, {}, {}, {"ε"}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {}, {"binop_add", "add_expr"}, {"binop_add", "add_expr"}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"terminal_expr", "mut_expr_rest"}, {"terminal_expr", "mut_expr_rest"}, {}, {}, {}, {}, {}, {}, {}, {}, {"terminal_expr", "mut_expr_rest"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"terminal_expr", "mut_expr_rest"}, {"terminal_expr", "mut_expr_rest"}, {"terminal_expr", "mut_expr_rest"}, {"terminal_expr", "mut_expr_rest"}, {"terminal_expr", "mut_expr_rest"}, {}, {}, {"ε"}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {}, {"ε"}, {"ε"}, {"binop_mut", "mut_expr"}, {"binop_mut", "mut_expr"}, {"binop_mut", "mut_expr"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"ident", "expr_rest_ident"}, {"(", "expr", ")"}, {}, {}, {}, {}, {}, {}, {}, {}, {"[", "expr_etoile_virgule", "]"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"const"}, {"const"}, {"const"}, {"const"}, {"const"}, {}, {}, {"ε"}, {}, {}, {"(", "expr_etoile_virgule", ")"}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"expr_plus_virgule"}, {"expr_plus_virgule"}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {"expr_plus_virgule"}, {"ε"}, {}, {}, {}, {}, {"expr_plus_virgule"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"expr_plus_virgule"}, {"expr_plus_virgule"}, {"expr_plus_virgule"}, {"expr_plus_virgule"}, {"expr_plus_virgule"}, {}, {}, {}, {}, {"expr", "expr_plus_virgule_rest"}, {"expr", "expr_plus_virgule_rest"}, {}, {}, {}, {}, {}, {}, {}, {}, {"expr", "expr_plus_virgule_rest"}, {}, {}, {}, {}, {}, {"expr", "expr_plus_virgule_rest"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"expr", "expr_plus_virgule_rest"}, {"expr", "expr_plus_virgule_rest"}, {"expr", "expr_plus_virgule_rest"}, {"expr", "expr_plus_virgule_rest"}, {"expr", "expr_plus_virgule_rest"}, {}, {}, {}, {}, {}, {}, {"ε"}, {}, {",", "expr_plus_virgule"}, {}, {}, {}, {}, {}, {}, {"ε"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"+"}, {"-"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"*"}, {"//"}, {"%"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"<="}, {">="}, {">"}, {"<"}, {"!="}, {"=="}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"and"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"or"}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {"integer"}, {"string"}, {"True"}, {"False"}, {"None"},  {}};

        String[] non_terminals = {"file", "opt_newline", "def_etoile", "stmt_plus", "stmt_plus_rest", "deft", "ident_etoile_virgule", "ident_plus_virgule", "ident_plus_virgule_rest", "suite", "simple_stmt", "simple_stmt_fact", "simple_stmt_fact_fact", "stmt", "stmt_else", "expr", "expr_crochet_etoile", "or_expr", "or_expr_rest", "and_expr", "and_expr_rest", "not_expr", "comp_expr", "comp_expr_rest", "add_expr", "add_expr_rest", "mut_expr", "mut_expr_rest", "terminal_expr", "expr_rest_ident", "expr_etoile_virgule", "expr_plus_virgule", "expr_plus_virgule_rest", "binop_add", "binop_mut", "binop_comp", "binop_and", "binop_or", "const"};

        String[] terminals = {"EOF", "NEWLINE", "def", "ident", "(", ")", ":", ",", "BEGIN", "END", "return", "print", "=", "[", "]", "for", "in", "if", "else", "not", "+", "-", "*", "//", "%", "<=", ">=", ">", "<", "!=", "==", "and", "or", "integer", "string", "True", "False", "None", "$"};

        this.non_terminals = non_terminals;
        this.terminals = terminals;
        this.rules = rules;

        int ligns = non_terminals.length;
        int columns = terminals.length;

        for (int i = 0; i<ligns; i++) {
            Map<String, String[]> lign = new HashMap<>();
            
            table.put(non_terminals[i], lign);
            for (int j = 0; j<columns; j++) {
                lign.put(terminals[j], rules[i*columns+j]);
            }
        }

        return table;
    }

    public void print_ll1_table() {
        int ligns = this.ll1_table.size();
        int columns = this.ll1_table.get("file").size();

        System.out.print("{");
        for (int i = 0; i<ligns; i++) {
            System.out.print("{" + this.non_terminals[i] + ":\n");
            for (int j = 0; j<columns-1; j++) {
                System.out.print("{" + this.terminals[j] + ":" + Arrays.toString(this.ll1_table.get(this.non_terminals[i]).get(this.terminals[j])) + "}\n");
            }
            System.out.print("{" + this.terminals[columns-1] + ":" + Arrays.toString(this.ll1_table.get(this.non_terminals[i]).get(this.terminals[columns-1])) + "}");
            System.out.print("}\n");
        }
    }
    
}

