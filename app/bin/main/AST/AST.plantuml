@startuml AST
    class AST extends Node {
        - File root
    }

    abstract class Node {
        + {abstract} void vizualisation(BufferedWriter writer,  String nodeName) throws IOException
        + {abstract} Node simplify()
    }

    class File extends Node { 
        - List<Def> defs 
        - List<Stmt> stmts 
        + File()
        + List<Def> getDefs()
        + void addDefs(Def def)
        + List<Stmt> getStmts()
        + void addStmt(Stmt stmt)
    }

    class Def extends Node {
        - Ident ident
        - List<Ident> idents
        - Stmt suite
        + Def() 
        + Ident getIdent()
        + void setIdent(Ident new_ident)
        + List<Ident> getIdents()
        + void addIdent(Ident new_idents)
        + Stmt getSuite()
        + void setSuite(Stmt suite)
    }

    class Suite extends Node {
        - List<Stmt> stmts
        + Suite()
        + List<Stmt> getStmts()
        + void addStmt(Stmt stmt)
    }

    abstract class SimpleStmt extends Stmt

    class Return extends SimpleStmt {
        - Expr expr
        + Return()
        + Expr getExpr()
        + void setExpr(Expr expr)
    }

    class Print extends SimpleStmt {
        - Expr expr
        + Print()
        + Expr getExpr()
        + void setExpr(Expr expr)
    }

    class Affect extends SimpleStmt {
        - Ident ident
        - Expr expr
        + Affect()
        + Ident getIdent()
        + void setIdent(Ident ident)
        + Expr getExpr()
        + void setExpr(Expr expr)
    }

    class AffectTab extends SimpleStmt {
        - Expr expr1
        - Expr expr2
        - Expr expr3
        + AffectTab()
        + Expr getExpr1()
        + void setExpr1(Expr expr)
        + Expr getExpr2()
        + void setExpr2(Expr expr)
        + Expr getExpr3()
        + void setExpr3(Expr expr)
    }

    abstract class Stmt extends Node

    class If extends Stmt {
        - Expr ifExpr
        - Suite then
        + If()
        + Expr getExpr()
        + void setExpr(Expr ifExpr)
        + Suite getThen()
        + void setThen(Suite then)
    }

    class IfElse extends Stmt {
        - Expr ifExpr
        - Suite then
        - Suite elseBlock
        + IfElse()
        + Expr getIf()
        + void setIf(Expr ifExpr)
        + Suite getThen()
        + void setThen(Suite then)
        + Suite getElse()
        + void setElse(Suite elseBlock)
    }

    class For extends Stmt {
        - Ident ident
        - Expr expr
        - Suite suite
        + For()
        + Ident getIdent()
        + void setIdent(Ident ident)
        + Expr getExpr()
        + void setExpr(Expr expr)
        + Suite getSuite()
        + void setSuite(Suite suite)
    }

    abstract class Expr extends SimpleStmt 

    class OrExpr extends Expr{
        - List<AndExpr> exprs
        + OrExpr()
        + List<AndExpr> getOrExprs()
        + void addExpr(AndExpr expr)
    }

    class AndExpr extends OrExpr{
        - List<NotExpr> exprs
        + AndExpr()
        + List<NotExpr> getAndExprs()
        + void addExpr(NotExpr expr)
    }
    
    class NotExpr extends AndExpr {
        - NotExpr expr
        + NotExpr()
        + NotExpr getNotExpr()
        + void setExpr(NotExpr expr) 
    }

    class CompExpr extends NotExpr {
        - CompBinop symbole
        - AddExpr left
        - AddExpr right
        + CompExpr()
        + CompBinop getCompSymbole()
        + void setSymbole(CompBinop symbole)
        + AddExpr getLeft()
        + void setLeft(AddExpr left)
        + AddExpr getRight()
        + void setRight(AddExpr right)
    }

    enum CompBinop {
        LESS_THAN
        LESS_EQUAL
        GREATER_THAN
        GREATER_EQUAL
        EQUAL
        NOT_EQUAL
    }

    CompBinop -- CompExpr

    interface LeftAssociativity {
        + void leftRotate()
    }

    class AddExpr extends CompExpr implements LeftAssociativity{
        - AddBinop symbole
        - AddExpr left
        - AddExpr right
        + AddExpr()
        + AddBinop getAddSymbole()
        + void setSymbole(AddBinop symbole)
        + AddExpr getLeft()
        + void setLeft(AddExpr left)
        + AddExpr getRight()
        + void setRight(AddExpr right)
    }

    enum AddBinop {
        ADD 
        SUB
    }

    AddBinop -- AddExpr

    class MutExpr extends AddExpr implements LeftAssociativity {
        - MutBinop symbole
        - MutExpr left
        - MutExpr right
        + MutExpr()
        + MutBinop getMutSymbole()
        + void setSymbole(MutBinop symbole)
        + MutExpr getLeft()
        + void setLeft(MutExpr left)
        + MutExpr getRight()
        + void setRight(MutExpr right)
    }

    enum MutBinop {
        MULT
        DIV
        MOD
    }

    MutExpr -- MutBinop

    class MinusExpr extends MutExpr  {
        - MinusExpr expr
        + MinusExpr()
        + MinusExpr getExpr()
        + void setExpr(MinusExpr expr) 
    }

    abstract class TermExpr extends MinusExpr

    class IdentP extends TermExpr {
        - Ident ident
        - List<Expr> exprs
        + IdentP()
        + Ident getIdent() 
        + void setIdent(Ident ident)
        + List<Expr> getExprs()
        + void addExprs(Expr expr)
    }

    class Ident extends TermExpr {
        - String name
        + Ident()
        + String getName()
        + void setName(String name)
    }

    class List extends TermExpr {
        - List<Expr> exprs
        + List()
        + List<Expr> getExprs()
        + void addExprs(Expr expr)
    }

    class Parenthese extends TermExpr {
        - Expr expr
        + Parenthese()
        + Expr getExpr()
        + void setExpr(Expr expr)
    }

    abstract class Const extends TermExpr 

    class IntegerType extends Const {
        - int value
        + Integer()
        + Integer(int value)
        + int getValue()
        + void setValue(int value)
    }

    class StringType extends Const {
        - String value
        + String()
        + String(String value)
        + String getValue()
        + void setValue(int value)
    }

    class Bool extends Const {
        - boolean value
        + Bool()
        + Bool(boolean value)
        + boolean getBool()
        + void setBool(boolean value)
    }

    class None extends Const

@enduml