Grammaire d'origine :

<file> ::= NEWLINE? <def>* <stmt>+ EOF
<def> ::= def <ident> ( <ident>*, ) : <suite>
<suite> ::= <simple_stmt> NEWLINE
            | NEWLINE BEGIN <stmt>+ END
<simple_stmt> ::= return <expr>
                | <ident> = <expr>
                | <expr> [ <expr> ] = <expr>
                | print ( <expr> )
                | <expr>
<stmt> ::= <simple_stmt> NEWLINE
        | if <expr> : <suite>
        | if <expr> : <suite> else : <suite>
        | for <ident> in <expr> : <suite>
<expr> ::= <const>
        | <ident>
        | <expr> [ <expr> ]
        | - <expr>
        | not <expr>
        | <expr> <binop> <expr>
        | <ident> ( <expr>*, )
        | [ <expr>*, ]
        | ( <expr> )
<binop> ::= + | - | * | // | % | <= | >= | > | < | != | ==
        | and | or
<const> ::= <integer> | <string> | True | False | None 

Grammaire LL(1) :

<file> ::= <opt_newline> <def_list> <stmt_list> EOF
<opt_newline> ::= NEWLINE | ε
<def_list> ::= <def> <def_list> 
            | ε
<stmt_list> ::= <stmt> <stmt_list>
            | ε
<def> ::= def <ident> ( <ident_list> ) : <suite>
<ident_list> ::= <ident> <ident_list_rest>
              | ε
<ident_list_rest> ::= , <ident> <ident_list_rest>
                   | ε
<suite> ::= <simple_stmt> NEWLINE
          | NEWLINE BEGIN <stmt_list> END
<simple_stmt> ::= return <expr>
               | <ident> = <expr>
               | <expr> [ <expr> ] = <expr>
               | print ( <expr> )
               | <expr>
<stmt> ::= <simple_stmt> NEWLINE
        | if <expr> : <suite> <else_part>
        | for <ident> in <expr> : <suite>
<else_part> ::= else : <suite>
             | ε
<expr> ::= <term> <expr_prime>
<expr_prime> ::= <binop> <term> <expr_prime>
              | ε
<term> ::= <factor> <term_prime>
<term_prime> ::= [ <expr> ] <term_prime_rest>
              | ε
<term_prime_rest> ::= = <expr>
                   | ε
<factor> ::= <const>
           | <ident> <factor_prime>
           | [ <expr_list> ]
           | - <factor>
           | not <factor>
           | ( <expr> )
<factor_prime> ::= ( <arg_list> ) | ε
<arg_list> ::= <expr> <arg_list_rest>
            | ε
<arg_list_rest> ::= , <expr> <arg_list_rest>
                 | ε
<expr_list> ::= <expr> <expr_list_rest>
             | ε
<expr_list_rest> ::= , <expr> <expr_list_rest>
                  | ε
<binop> ::= + | - | * | // | % | <= | >= | > | < | != | == | and | or
<const> ::= <integer> | <string> | True | False | None
