file -> opt_newline def_list stmt_list EOF .
opt_newline -> NEWLINE .
opt_newline -> .
def_list -> def def_list .
def_list -> .
stmt_list -> stmt stmt_list .
stmt_list -> .
def -> deft ident "(" ident_list ")" ":" suite .
ident_list -> ident ident_list_rest .
ident_list -> .
ident_list_rest -> "," ident ident_list_rest .
ident_list_rest -> .
suite -> simple_stmt NEWLINE .
suite -> NEWLINE BEGIN stmt_list END .
simple_stmt -> return expr .
simple_stmt -> ident "=" expr .
simple_stmt -> expr "[" expr "]" "=" expr .
simple_stmt -> print "(" expr ")" .
simple_stmt -> expr .
stmt -> simple_stmt NEWLINE .
stmt -> if expr ":" suite else_part .
stmt -> for ident in expr ":" suite .
else_part -> else ":" suite .
else_part -> .
expr -> term expr_prime .
expr_prime -> binop term expr_prime .
expr_prime -> .
term -> factor term_prime .
term_prime -> "[" expr "]" term_prime_rest .
term_prime -> .
term_prime_rest -> "=" expr .
term_prime_rest -> .
factor -> const .
factor -> ident factor_prime .
factor -> "[" expr_list "]" .
factor -> "-" factor .
factor -> not factor .
factor -> "(" expr ")" .
factor_prime -> "(" arg_list ")" .
factor_prime -> .
arg_list -> expr arg_list_rest .
arg_list -> .
arg_list_rest -> "," expr arg_list_rest .
arg_list_rest -> .
expr_list -> expr expr_list_rest .
expr_list -> .
expr_list_rest -> "," expr expr_list_rest .
expr_list_rest -> .
binop -> "+" .
binop -> "-" .
binop -> "*" .
binop -> "/""/" .
binop -> "%" .
binop -> "<=" .
binop -> ">=" .
binop -> ">" .
binop -> "<" .
binop -> "!=" .
binop -> "=""=" .
binop -> and .
binop -> or .
const -> integer .
const -> string .
const -> True .
const -> False .
const -> None .